services:
  user-search-service:
    build:
      context: .
      dockerfile: Dockerfile.fixed
    container_name: user-search-service
    ports:
      - "8084:8084"
    env_file:
      - env.sample
    environment:
      - PORT=8084
      - ENVIRONMENT=development
      - POSTGRES_HOST=postgres
      - MONGO_URI=mongodb://mongodb:27017
      - REDIS_URL=redis://redis:6379
      - USER_SERVICE_URL=http://user-service:4001/api
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8084/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    restart: unless-stopped
    networks:
      - circle-connect-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  redis:
    image: redis:alpine
    container_name: search-redis
    ports:
      - "6380:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - circle-connect-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  postgres:
    image: postgres:15-alpine
    container_name: search-postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=circleConnect
    ports:
      - "5433:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - circle-connect-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

  mongodb:
    image: mongo:6-jammy
    container_name: search-mongodb
    ports:
      - "27018:27017"
    volumes:
      - mongodb-data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - circle-connect-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

volumes:
  redis-data:
  postgres-data:
  mongodb-data:

networks:
  circle-connect-network:
    driver: bridge 