FROM golang:1.24-alpine AS builder

# Install build dependencies
RUN apk add --no-cache git

WORKDIR /app

# Copy only go.mod and go.sum first to leverage Docker cache
COPY go.mod go.sum ./
RUN go mod download

# Copy the source code
COPY . .

# Fix the health endpoint issue by modifying the routes file directly
RUN sed -i 's|r.GET("/health", func(c \*gin.Context) {|r.GET("/healthz", func(c \*gin.Context) {|g' routes/search_routes.go

# Build the application with optimizations
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -a -installsuffix cgo -o search-service .

# Use a minimal alpine image for the final stage
FROM alpine:latest

# Add CA certificates and tzdata for HTTPS and proper timezone
RUN apk add --no-cache ca-certificates tzdata

WORKDIR /app

# Copy the binary from the builder stage
COPY --from=builder /app/search-service .

# Create a non-root user to run the application
RUN adduser -D appuser && \
    chown -R appuser:appuser /app
USER appuser

# Expose the application port
EXPOSE 8084

# Set environment variables
ENV GIN_MODE=release

# Add health check using the custom health endpoint
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD wget -qO- http://localhost:8084/healthz || exit 1

# Set the entrypoint
CMD ["./search-service"] 